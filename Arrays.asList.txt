public static void main(String[] args){
    int[] a1 = new int[]{1,2,3};
    String[] a2 = new String[]{"a","b","c"};
      
    System.out.println(Arrays.asList(a1));
    System.out.println(Arrays.asList(a2));
}
　　

打印结果如下：

[[I@dc8569]
[a, b, c]
　　

下面说说Arrays.asList()的返回值：

JDK文档是这么说的：
public static <T> List<T> asList(T... a) 返回一个受指定数组支持的固定大小的列表。（对返回列表的更改会“直接写”到数组。）此方法同 Collection.toArray() 一起，充当了基于数组的 API 与基于 collection 的 API 之间的桥梁。返回的列表是可序列化的，并且实现了 RandomAccess。此方法还提供了一个创建固定长度的列表的便捷方法，该列

/**
 * @serial include
 */
 private static class ArrayList<E> extends AbstractList<E> implements RandomAccess, java.io.Serializable {
     private static final long serialVersionUID = -2764017481108945198L;
     private final E[] a;
  
     ArrayList(E[] array) {
         if (array == null)
         throw new NullPointerException();
         a = array;
     }
      
     public int size() {
        return a.length;
     }
      
     public Object[] toArray() {
        return a.clone();
     }
      
     public <T> T[] toArray(T[] a) {
         int size = size();
         if (a.length < size)
            return Arrays.copyOf(this.a, size, (Class<? extends T[]>) a.getClass());
         System.arraycopy(this.a, 0, a, 0, size);
         if (a.length > size)
            a[size] = null;
         return a;
     }
      
     public E get(int index) {
        return a[index];
     }
      
     public E set(int index, E element) {
         E oldValue = a[index];
         a[index] = element;
         return oldValue;
     }
      
     public int indexOf(Object o) {
         if (o == null) {
             for (int i = 0; i < a.length; i++)
             if (a[i] == null)
             return i;
         } else {
             for (int i = 0; i < a.length; i++)
             if (o.equals(a[i]))
             return i;
         }
         return -1;
     }
      
     public boolean contains(Object o) {
        return indexOf(o) != -1;
     }
}